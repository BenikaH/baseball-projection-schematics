#!/usr/bin/env python

from __future__ import unicode_literals
import codecs
import json
import optparse
import os
import pprint
import re
import string
import sys

import click

from schematics.exceptions import ModelValidationError

import unicodecsv as csv

from projnorm import helpers, settings
from projnorm.models import ProjectionSchematic


QUIET = 0
LOUD = 1

space_re = re.compile(r'\s\s+')

def clean_text(value):
    if not isinstance(value, basestring):
        return value
    if value:
        return space_re.sub(' ', value).strip()
    return value


def clean_value(value, default=None):
    if not value:
        if default is not None:
            return default
        return value
    if isinstance(value, basestring):
        value = clean_text(value)
    return float(value)


def call_helper(helper_name, *args):
    helper_fn = getattr(helpers, helper_name, None)
    if helper_fn is None:
        raise click.BadParameter('Helper {} does not exist!'
                                 .format(helper_name))
    return helper_fn(*args)


def process(schematic, data_fp):
    "Processes a batting or pitching projection"

    data = csv.DictReader(codecs.open(data_fp.name, 'rb', 'utf-8'),
                          encoding='utf-8-sig')

    for row in data:
        projected_line = {}

        name_last, name_first, name_full, name_lfc = None, None, None, None

        # build player information
        if schematic.player.name_full is not None:
            name_full = PlayerName(full=row[schematic.player.name_full])
        else:
            name_last = row[schematic.player.name_last]
            name_first = row[schematic.player.name_first]
            name_full = '{} {}'.format(name_first, name_last)
            name_lfc = '{}, {}'.format(name_last, name_first)

        # get player roles, flatten into comma-separated string
        if schematic.player.roles:
            # peek at [0] to feel out of this array of roles
            # is calling for a helper
            if schematic.player.roles[0].startswith('helper_'):
                args = [row[kw] for kw in schematic.player.roles[1:]]
                roles = call_helper(schematic.player.roles[0], *args)
            else:
                roles = [row[key] for key in schematic.player.roles]

            roles = map(string.upper, roles)

        # add player information
        projected_line.update(
            name_last = name_last,
            name_first = name_first,
            name_full = name_full,
            name_lcf = name_lfc,
            age = row.get(schematic.player.age),
            bats = row.get(schematic.player.hands.bats),
            throws = row.get(schematic.player.hands.throws),
            league = row.get(schematic.player.league),
            roles = ','.join(roles)
        )

        # build player keys
        for key in schematic.player.ids:
            column_name = schematic.player.ids[key]
            value = None
            if column_name is not None:
                value = row.get(column_name)
            projected_line[key] = value

        # build components
        for key in schematic.components:
            column_name = schematic.components[key]
            value = None
            if column_name is not None:
                value = row.get(column_name)

                if isinstance(value, list) and value[0].startswith('helper_'):
                    value = call_helper(value[0], *value[1:])

            projected_line[key] = value

        yield projected_line


@click.command()
@click.option('-s', '--schematic', 'schematic_fp', type=click.File('rb'),
              help='Path to JSON schematic', required=True)
@click.option('-t', '--type', 'projection_type',
              type=click.Choice(('batting', 'pitching', )), required=True)
@click.option('-i', '--input', 'input_fp', type=click.File('rb'),
              required=True)
@click.option('-v', '--verbosity', type=click.INT, default=0)
@click.argument('destination', type=click.File('w'), required=True)
def process_projections(schematic_fp, projection_type, input_fp,
                        verbosity, destination):
    # read config
    config = settings.DEFAULT_CONFIG

    # load schematic
    schematic = ProjectionSchematic(json.load(schematic_fp))

    # process input
    projections = process(schematic[projection_type], input_fp)

    # start off with basic player information
    columns = [
        'system', 'season',
        'name_last', 'name_first', 'name_full', 'name_lcf',
        'age', 'bats', 'throws', 'league', 'roles'
    ]

    # add player id keys
    columns.extend( sorted(schematic[projection_type].player.ids.keys()) )
    # add components
    columns.extend( config['components'][projection_type] )

    # write header row and re-formatted projections
    writer = csv.writer(destination)
    writer.writerow(columns)

    for line in projections:
        line['system'] = schematic.system
        line['season'] = schematic.season

        row = [
            clean_text(line[key])
            for key
            in columns
        ]

        writer.writerow(row)


if __name__ == '__main__':
    process_projections()
